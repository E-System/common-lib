import java.nio.file.Files
import java.nio.file.NoSuchFileException
import java.nio.file.Paths
import java.time.LocalDateTime

/*
 * Copyright 2016 E-System LLC
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
    }
}

wrapper {
    gradleVersion = '6.5.1'
}

apply from: "build-${profile}.gradle"
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group = ext.mainGroup
version = ext.mainVersion + (ext.snapshot ? '-SNAPSHOT' : '')

repositories {
    jcenter()
    mavenLocal()
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = JavaVersion.VERSION_1_8
    }
    module {
        downloadJavadoc = false
        downloadSources = false
        inheritOutputDirs = true
        excludeDirs += file('gradle')
        excludeDirs += file('out')
    }
}

def propName = rootProject.name
def fullPath = '/com/es/lib/common'
if (!fullPath.startsWith('/src/main/resources')) {
    fullPath = '/src/main/resources' + fullPath
}
def versionString = "${project.version}"
def filePath = "${project.projectDir}${fullPath}/"
new File(filePath).mkdirs()
try {
    Files.delete(Paths.get(filePath, 'build.properties'))
} catch (NoSuchFileException ignore) {
}
println("Create file for property: ${filePath}")
project.ant.propertyfile(file: "${filePath}build.properties") {
    ant.entry(key: 'name', value: propName)
    ant.entry(key: 'version', value: versionString)
    ant.entry(key: 'date', value: "${LocalDateTime.now().toString()}")
}

jar {
    manifest {
        attributes(
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'E-SYSTEM'
        )
    }
}
javadoc {
    failOnError = false
    options.encoding = 'utf-8'
}
tasks.create(name: 'javadocJar', type: Jar, dependsOn: 'javadoc') {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}
tasks.create(name: 'sourceJar', type: Jar) {
    from sourceSets.main.allJava
}

artifacts {
    archives javadocJar
    archives sourceJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact javadocJar {
                classifier 'javadoc'
            }
            artifact sourceJar {
                classifier 'sources'
            }
        }
    }
}
dependencies {
    api "org.apache.commons:commons-lang3:3.11"
    api "org.slf4j:slf4j-api:1.7.30"
    api "com.fasterxml.jackson.core:jackson-databind:2.11.2"
    api "com.sun.mail:jakarta.mail:1.6.5"
    api "de.svenkubiak:jBCrypt:0.4.1"
    api "commons-io:commons-io:2.8.0"
    api "org.reflections:reflections:0.9.12"

    compileOnly "org.projectlombok:lombok:1.18.12"
    annotationProcessor "org.projectlombok:lombok:1.18.12"

    testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
}

def emailTestEnabled = properties['test_email_server'] != null && properties['test_email_login'] != null && properties['test_email_password'] != null
if (emailTestEnabled) {
    test {
        systemProperty 'test_email_server', "${test_email_server}"
        systemProperty 'test_email_login', "${test_email_login}"
        systemProperty 'test_email_password', "${test_email_password}"
    }
}

test {
    finalizedBy jacocoTestReport
}

def sonarAvailable = properties['sonar_url'] != null && properties['sonar_user'] != null && properties['sonar_password'] != null
if (sonarAvailable) {
    apply plugin: 'org.sonarqube'
    sonarqube {
        properties {
            property "sonar.host.url", "${sonar_url}"
            property "sonar.login", "${sonar_user}"
            property "sonar.password", "${sonar_password}"
        }
    }
}
